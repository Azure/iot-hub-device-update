variables:
  version.major: 0
  version.minor: 8
  version.patch: 0
  version.pre-release: "rc1-public-preview"
  version.build: $[format('{0:yyyyMMdd}-{0:HHmmss}', pipeline.startTime)]

  # Environment variables for all client builds:
  ADUC_VERSION_MAJOR: $(version.major)
  ADUC_VERSION_MINOR: $(version.minor)
  ADUC_VERSION_PATCH: $(version.patch)
  ADUC_VERSION_PRERELEASE: $(version.pre-release)
  ADUC_VERSION_BUILD: $(version.build)
  ADUC_DEBIAN_PACKAGE_ARCHITECTURE: "arm32"
  
  ENABLE_ADU_TELEMETRY_REPORTING: true
  # ADUC_BUILDER_IDENTIFIER will be set to "DU" short for Device Update by default, for Device Update-sourced builder
  ADUC_BUILDER_IDENTIFIER: DU
  # DO requires gcc greater than 6 for c++17 support.
  # gcc-8 matches what is built with poky warrior.
  CC: gcc-8
  CXX: g++-8

name: $(version.major).$(version.minor).$(version.patch)-$(version.pre-release)+$(version.build)

resources:
  - repo: self

trigger:
  branches:
    include:
      # TODO: Deliverable 32125353: [GA] Support OS Debian 10 with DU extensible agent
      # Pause Debian 9 ARM 32 build for now.
      # - main
      # - release/*
  paths:
    exclude:
      - docs/*
      - README.md
      - LICENSE.md
      - .clang-format
      - .cmake-format.json
      - docker/*

pr:
  branches:
    include:
      # TODO: Deliverable 32125353: [GA] Support OS Debian 10 with DU extensible agent
      # Pause Debian 9 ARM 32 build for now.
      # - main
      # - release/*
      # - feature/*
      #- dev/*
  paths:
    exclude:
      - docs/*
      - README.md
      - LICENSE.md
      - .clang-format
      - .cmake-format.json
      - tools/*
      - docker/*
      - scripts/*
      - licenses/*

jobs:
  - job: BuildAduAgent
    displayName: "Build ADU Agent"
    timeoutInMinutes: 360
    cancelTimeoutInMinutes: 360
    pool: aduc_1es_client_pool
    steps:
      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        displayName: "Component Detection"
        inputs:
          sourceScanPath: src

      - task: Docker@2
        displayName: Login to ACR
        inputs:
          command: login
          containerRegistry: aduccontainerregistry
          repository: debian9-arm32

      - task: Docker@2
        displayName: Pull latest build image
        inputs:
          command: pull
          containerRegistry: aduccontainerregistry
          arguments: "aduccontainerregistry.azurecr.io/debian9-arm32:latest"

      - bash: |
          echo "Running whoami"
          whoami
          echo "Listing running containers"
          sudo docker ps -a
        displayName: "Prebuild"
        condition: always()

      - bash: |
          sudo docker run -d -t --rm -v $(Build.SourcesDirectory):/iot-hub-device-update -v ~/.gitconfig:/etc/.gitconfig --name arm32container aduccontainerregistry.azurecr.io/debian9-arm32:latest bash
        displayName: "Run docker container"

      - bash: |
          sudo docker exec -w /iot-hub-device-update arm32container scripts/build.sh --clean --type MinSizeRel --provision-with-iotedge --build-unit-tests --platform-layer linux --log-lib zlog --build-packages --static-analysis clang-tidy,cppcheck --out-dir out-arm32
        displayName: "Build Client, Unit Tests and Packages (linux-apt-MinSizeRel)"

      - bash: |
          cp out-arm32/*.deb $(Build.ArtifactStagingDirectory)
        displayName: "Stage build artifacts"
        condition: and(ne(variables['Build.Reason'], 'IndividualCI'), ne(variables['Build.Reason'], 'PullRequest'))

      - bash: |
          sudo docker exec -w /iot-hub-device-update/out-arm32 arm32container ctest -T test -V --output-on-failure
        displayName: "Run Unit Tests"

      - task: PublishTestResults@2
        displayName: "Publish Unit Test Results"
        condition: succeededOrFailed() # Run this task even if tests fail.
        inputs:
          testResultsFormat: cTest
          testResultsFiles: "Testing/**/*.xml"
          searchFolder: out-arm32
          failTaskOnFailedTests: true
          publishRunAttachments: false # Attachments are not supported for CTest

      - bash: |
          sudo docker exec -w /iot-hub-device-update arm32container scripts/build.sh --clean --platform-layer linux --log-lib zlog --static-analysis clang-tidy,cppcheck --out-dir out-arm32
        displayName: "Build Client (linux-Debug)"

      - task: PublishPipelineArtifact@0
        displayName: "Publish Pipeline Artifacts"
        condition: and(succeeded(), ne(variables['Build.Reason'], 'IndividualCI'), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
          artifactName: "adu-arm32-client"
          targetPath: "$(Build.ArtifactStagingDirectory)"

        # Ignore SC2164: Use 'cd ... || exit' or 'cd ... || return' in case cd fails.
        #   We usually want to return an error code from a specific, previous command
        #   even if popd, pushd, or cd fails.
        # Ignore SC2209: Use var=$(command) to assign output (or quote to assign string).
        #   We use 'ret=return' or 'ret=exit' to support dot sourcing.
      - bash: |
          sudo apt-get install -y shellcheck
          shellcheck -s bash -e SC2164 -e SC2209 $(find -name "*.sh")
          exit $?
        displayName: "Run ShellCheck"

        # Stop the running container at the end of the build job
        # Remove output directory to prevent persisting across build jobs
      - bash: |
          sudo docker stop arm32container
          sudo rm -rf out-arm32
        displayName: "Postbuild"
        condition: always()
