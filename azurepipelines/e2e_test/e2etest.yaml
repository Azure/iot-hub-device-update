# E2E test pipeline - performs end-to-end tests on the following platforms
#  - Ubuntu 20.04

resources:
    containers:
        - container: ubuntu
          image: ubuntu:20.04
    repositories:
        - repository: 1ESPipelineTemplates
          type: git
          name: 1ESPipelineTemplates/1ESPipelineTemplates
          ref: refs/tags/release

parameters:
    - name: SKIP_TEARDOWN
      displayName: "Leave test infrastructure in-place"
      type: boolean
      default: false

    - name: TEST_ARTIFACTS_UPLOADCONTAINER
      displayName: "The name of the container to upload the test artifacts"
      type: string
      default: "gen1-test-artifacts"

variables:
    SKIP_TEARDOWN: ${{ parameters.SKIP_TEARDOWN }}
    E2E_WORKING_DIR: $(Build.SourcesDirectory)/azurepipelines/e2e_test

    Adu_Test_Msi: "adu-client-1es-msi"
    Adu_Arm_Service_Connection: "adu_subscr_servc_connection"
    Test_Vm_Ssh_PublicKey: ""
    Test_Vm_Ssh_PrivateKeyFile: "adu_e2e_test_ssh_key"
    Test_Vm_Ssh_PublicKeyFile: "adu_e2e_test_ssh_key.pub"
    Test_VmAdmin: "azureuser"
    Test_ResourceGroupname: "e2e-rg-$(Build.BuildId)" # Composed of e2e-rg-$(Build.BuildId)
    Test_VmName: "e2e-vm-$(Build.BuildId)"            # Composed of e2e-vm-$(Build.BuildId)
    Test_InfraDeploymentName: "e2e-deployment-$(Build.BuildId)" #Composed of e2e-deployment-$(Build.BuildId)
    Test_VmHostname: "" # Set after the VM is created
    Test_Location: "westus3"
    Test_DeviceName: "ubuntu-2004-x509-test-device"
    Test_Distro: "ubuntu-20.04"
    Test_Arch: "amd64"

name: "E2E Automated Test Run"
extends:
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: aduc_1es_client_pool
      os: linux

    sdl:
      sourceAnalysisPool:
        name: 1es_hosted_pool_windows
        os: windows
      suppression:
        suppressionFile: $(Build.SourcesDirectory)\guardian\SDL\.gdnsuppress
    customBuildTags:
    - ES365AIMigrationTooling

    stages:
        - stage: PerformNativeBuilds
          displayName: Builds all the native architecture builds
          jobs:
              - job: BuildUbuntu_2004_AMD64
                displayName: Building the Device Update Package for Ubuntu 20.04 AMD64
                continueOnError: False
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/build/templates/adu-docker-build-steps.yml@self
                      parameters:
                          targetOs: ubuntu2004
                          targetArch: amd64
        - stage: PublishPackageUnderTest
          displatName: Publish the Package under Test to the Storage
          jobs:
              - job: PublishUbuntu2004_AMD64_Package
                displayName: Publish the Ubuntu 20.04 AMD64 Package to the Storage
                continueOnError: False
                pool: aduc_1es_client_pool
                steps:
                    - task: AzureCLI@2
                      displayName: "Publish the Ubuntu 20.04 AMD64 Package to the Storage"
                      inputs:
                          azureSubscription: $(Adu_Arm_Service_Connection)
                          scriptType: bash
                          scriptLocation: inlineScript
                          inlineScript: |
                              echo "Publishing the Ubuntu 20.04 AMD64 Package to the Storage"
                              az storage blob upload --auth-mode login --account-name $(AZURE_STORAGE_ACCOUNT_NAME) --container-name $(TEST_ARTIFACTS_UPLOADCONTAINER) --file $(Build.ArtifactStagingDirectory)/*.deb --name deviceupdate-$(Build.BuildId).deb
                          failOnStandardError: true
                    - bash: |
                        echo "The Package under Test is deviceupdate-$(Build.BuildId).deb"
                        echo "##vso[task.setvariable variable=packageUnderTest;isOutput=true]deviceupdate-$(Build.BuildId).deb"
                      displayName: "Display the Package under Test"
                      name: package_under_test_publisher
        - stage: InitializeTestInfra
          displayName: Initializes the Infrastructure for the Automated Tests
          variables:
              TERRAFORM_RESOURCE_GROUP_NAME: $[ stageDependencies.TerraformSetup.TerraformInstall.outputs['resource_group_name_step.TERRAFORM_RESOURCE_GROUP_NAME'] ]
          pool: aduc_1es_client_pool
          jobs:

              - job: SetupUbuntu2004_AMD64_VM
                displayName: "Setting up VM for Ubuntu 20.04 AMD64 Test VM"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:

                    - task: DownloadSecureFile@1
                      displayName: "Download the SSH Key for the VM"
                      name: public_vm_key
                      inputs:
                          secureFile: $(Test_Vm_Ssh_PublicKeyFile)
                          retryCount: 3
                          retryIntervalInSeconds: 5
                    - task: DownloadSecureFile@1
                      displayName: "Download the SSH Key for the VM"
                      name: private_vm_key
                      inputs:
                          secureFile: $(Test_Vm_Ssh_PrivateKeyFile)
                          retryCount: 3
                          retryIntervalInSeconds: 5
                    - bash: |
                         curl -s http://ipinfo.io/json | jq '.ip'
                      displayName: "Get the Public IP Address of the Agent"
                    - bash: |
                        key_contents=$(cat $(public_vm_key.secureFilePath))
                        echo "##vso[task.setvariable variable=Test_Vm_Ssh_PublicKey;isOutput=true;]$key_contents"
                      displayName: "Set the VM SSH Key variable for reading into the Azure VM Template"
                      name: set_ssh_key
                      workingDirectory: $(Agent.TempDirectory)
                    - bash: |
                        echo "The Test_InfraDeploymentName is $(Test_InfraDeploymentName)"
                      displayName: "Display the Infra Deployment's Name"

                    - task: AzureCLI@2
                      displayName: "Create the RG for the E2E Test Infrastructure"
                      inputs:
                          azureSubscription: $(Adu_Arm_Service_Connection)
                          scriptType: bash
                          scriptLocation: inlineScript
                          inlineScript: |
                              echo "Creating the RG for Test Infrastructure"
                              az group create --name $(Test_ResourceGroupname) --location $(Test_Location)
                          failOnStandardError: true

                    - task: AzureCLI@2
                      displayName: "Create the Ubuntu 20.04 VM for the E2E Test"
                      inputs:
                          azureSubscription: $(Adu_Arm_Service_Connection)
                          scriptType: bash
                          scriptLocation: inlineScript
                          inlineScript: |
                              echo "Creating the VM for Test"
                              az deployment group create --name $(Test_InfraDeploymentName) --resource-group "$(Test_ResourceGroupname)" --template-file ./azurepipelines/e2e_test/templates/az_vm.template.json --parameters adminUsername="$(Test_VmAdmin)" adminKey="$(set_ssh_key.Test_Vm_Ssh_PublicKey)" adminPassword="$(VM_ADMIN_PASS)" vmName="$(Test_VmName)" vmSize=Standard_DS1_v2 location=$(Test_Location) msi_resource_id="$(MSI_RESOURCE_ID)" msi_client_id="$(MSI_CLIENT_ID)" duSetupScriptFileUri="$(VM_SETUP_SCRIPT_URI)" duSetupScriptFileName="$(VM_SETUP_SCRIPT_FILE_NAME)" duSetupScriptFileArgs="--distro $(Test_Distro) --architecture $("Test_Arch") -s $(AZURE_STORAGE_ACCOUNT_NAME) -p $(package_under_test_publisher.packageUnderTest)"
                          failOnStandardError: true
                    - task: AzureCLI@2
                      displayName: "Get the Public Hostname of the VM"
                      inputs:
                        azureSubscription: $(Adu_Arm_Service_Connection)
                        scriptType: bash
                        scriptLocation: inlineScript
                        inlineScript: |
                            echo "Getting the Public IP Address of the VM"
                            hostname=$(az deployment group show -g $(Test_ResourceGroupname) -n $(Test_InfraDeploymentName) --query properties.outputs.hostname.value)
                            echo "##vso[task.setvariable variable=Test_VmHostname]$hostname"
                        failOnStandardError: true
                    # Trying to copy some stuff over to the file
                    - bash: |
                        echo "Waiting to give device the opportunity to connect"
                        sleep 600 # 10 minutes
                      displayName: "Wait a bit so the device can connect"

                    - task: PythonScript@0
                      displayName: Run script to test a deployment
                      continueOnError: True
                      inputs:
                        scriptSource: "filePath"
                        scriptPath: "$(E2E_WORKING_DIR)/scenarios/test_runner/apt_deployment.py"
                        workingDirectory: $(E2E_WORKING_DIR)
                      env:
                        IOTHUB_URL: $(IOTHUB_URL)
                        ADU_ENDPOINT: $(ADU_ENDPOINT)
                        ADU_INSTANCE_ID: $(ADU_INSTANCE_ID)
                        AZURE_CLIENT_ID: $(MSI_CLIENT_ID)
                        AZURE_TENANT_ID: $(MSI_TENANT_ID)
                        AZURE_RESOURCE_ID: $(MSI_RESOURCE_ID)
                        DISTRONAME: "$(Test_Distro)"
                        DEVICEID: "$(Test_DeviceName)"

                    - script: |
                        mkdir -p $(Build.ArtifactStagingDirectory)/testresults/
                        cp -R ./testresults/* $(Build.ArtifactStagingDirectory)/testresults/
                      displayName: Copy terraform state (vm)
                      workingDirectory: $(E2E_WORKING_DIR)

                    - task: 1ES.PublishPipelineArtifact@1
                      inputs:
                        targetPath: "$(Build.ArtifactStagingDirectory)/testresults/"
                        artifactName: "TestResults_$(Test_DeviceName)"
                        publishLocation: "pipeline"

                    - task: PublishTestResults@2
                      inputs:
                        testRunner: JUnit
                        testResultsFiles: "$(E2E_WORKING_DIR)/testresults/*.xml"
                        failTaskOnFailedTests: false
                        testRunTitle: "$(Test_DeviceName)"

                    - task: AzureCLI@2
                      displayName: "Cleanup the Test Infrastructure"
                      inputs:
                        azureSubscription: $(Adu_Arm_Service_Connection)
                        scriptType: bash
                        scriptLocation: inlineScript
                        inlineScript: |
                            az group delete --name $(Test_ResourceGroupname) --yes
                        failOnStandardError: true
