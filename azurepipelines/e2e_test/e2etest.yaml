# E2E test pipeline - performs end-to-end tests on the following platforms
#  - Ubuntu 20.04

resources:
    containers:
        - container: ubuntu
          image: ubuntu:20.04
    repositories:
        - repository: 1ESPipelineTemplates
          type: git
          name: 1ESPipelineTemplates/1ESPipelineTemplates
          ref: refs/tags/release

parameters:
    - name: SKIP_TEARDOWN
      displayName: "Leave test infrastructure in-place"
      type: boolean
      default: false

variables:
    SKIP_TEARDOWN: ${{ parameters.SKIP_TEARDOWN }}
    E2E_WORKING_DIR: $(Build.SourcesDirectory)/azurepipelines/e2e_test

name: "E2E Automated Test Run"

extends:
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: aduc_1es_client_pool
      os: linux

    sdl:
      sourceAnalysisPool:
        name: 1es_hosted_pool_windows
        os: windows
      suppression:
        suppressionFile: $(Build.SourcesDirectory)\guardian\SDL\.gdnsuppress
    customBuildTags:
    - ES365AIMigrationTooling

    stages:
        - stage: PerformNativeBuilds
          displayName: Builds all the native architecture builds
          jobs:
              - job: BuildUbuntu_2004_AMD64
                displayName: Building the Device Update Package for Ubuntu 20.04 AMD64
                continueOnError: False
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/build/templates/adu-docker-build-steps.yml@self
                      parameters:
                          targetOs: ubuntu2004
                          targetArch: amd64

              - job: BuildUbuntu_2004_ARM64
                timeoutInMinutes: 360
                displayName: Building the Device Update Package for Ubuntu 20.04 ARM64
                continueOnError: False
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/build/templates/adu-docker-build-steps.yml@self
                      parameters:
                          targetOs: ubuntu2004
                          targetArch: arm64
              - job: BuildUbuntu_2204_AMD64
                displayName: Building the Device Update Package for Ubuntu 22.04 AMD64
                continueOnError: False
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/build/templates/adu-docker-build-steps.yml@self
                      parameters:
                          targetOs: ubuntu2204
                          targetArch: amd64
              - job: BuildUbuntu_2204_ARM64
                timeoutInMinutes: 360
                displayName: Building the Device Update Package for Ubuntu 22.04 ARM64
                continueOnError: False
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/build/templates/adu-docker-build-steps.yml@self
                      parameters:
                          targetOs: ubuntu2204
                          targetArch: arm64

              - job: BuildDebian_10_AMD64
                displayName: Building the Device Update Package for Debian 10 amd64
                continueOnError: False
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/build/templates/adu-docker-build-steps.yml@self
                      parameters:
                          targetOs: debian10
                          targetArch: amd64

        - stage: TerraformSetup
          displayName: Initializes and installs Terraform into the VM
          pool: aduc_1es_client_pool
          jobs:
              - job: TerraformInstall
                displayName: "Install Terraform Into the VM and Create the Resource Group"
                continueOnError: False
                steps:
                    - script: |
                          while pgrep apt > /dev/null; do sleep 1; done; sudo apt update && sudo apt install curl
                          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
                          sudo apt-add-repository "deb [arch=$(dpkg --print-architecture)] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
                          sudo apt install terraform
                      displayName: "Installing Terraform"
                    - script: "terraform init"
                      displayName: terraform init (VM)
                      continueOnError: true
                      workingDirectory: $(E2E_WORKING_DIR)/terraform/resource_group/
                    - script: 'terraform apply -var subscription_id="$(SUBSCRIPTION_ID)" -var tenant_id="$(TERRAFORM_TENANT_ID)" -var client_id="$(TERRAFORM_CLIENT_ID)" -var client_secret="$(TERRAFORM_CLIENT_SECRET)" -auto-approve'
                      displayName: Creating the resource group for the testing environment
                      continueOnError: true
                      workingDirectory: $(E2E_WORKING_DIR)/terraform/resource_group/
                    - script: |
                          RESOURCE_GROUP_NAME=`terraform output du_resource_group_name`
                          echo "$RESOURCE_GROUP_NAME"
                          echo "##vso[task.setvariable variable=TERRAFORM_RESOURCE_GROUP_NAME;isOutput=true]$RESOURCE_GROUP_NAME"
                      name: resource_group_name_step
                      displayName: Retrieve Resource Group Name
                      continueOnError: true
                      workingDirectory: $(E2E_WORKING_DIR)/terraform/resource_group/

        - stage: TerraformVMInitialization
          displayName: Initializes the Terraform VMs for the Automated Tests
          dependsOn:
              - TerraformSetup
              - PerformNativeBuilds
          variables:
              TERRAFORM_RESOURCE_GROUP_NAME: $[ stageDependencies.TerraformSetup.TerraformInstall.outputs['resource_group_name_step.TERRAFORM_RESOURCE_GROUP_NAME'] ]
          pool: aduc_1es_client_pool
          jobs:
              - job: SetupUbuntu2004_AMD64_VM
                displayName: "Setting up VM for Ubuntu 20.04 AMD64 Test VM"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_vm_setup.yaml@self
                      parameters:
                          distroName: ubuntu-20.04-amd64
                          provisioning_type: "sas"
                          vm_size: Standard_DS1_v2
                          image_publisher: canonical
                          image_offer: 0001-com-ubuntu-server-focal
                          image_sku: 20_04-lts
                          image_version: latest
                          packagePattern: "*ubuntu2004-amd64*/*.deb"
                          package_pipeline: "Azure.adu-private-preview.e2e-test"
                          du_tarball_script: >-
                              tar -xf /tmp/testsetup.tar.gz -C ./ &&
                              chmod u=rwx,g=rwx,o=rx ./testsetup/sas_vm_setup.sh &&
                              ./testsetup/sas_vm_setup.sh --distro ubuntu-20.04 --architecture amd64
                          image_working_directory: $(E2E_WORKING_DIR)
                          device_id_under_test: "ubuntu-20.04-amd64-sas"
              - job: SetupUbuntu2004_ARM64_VM
                displayName: "Setting up VM for Ubuntu 20.04 ARM64 Test VM"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_vm_setup.yaml@self
                      parameters:
                          distroName: ubuntu-20.04-arm64
                          provisioning_type: "sas"
                          vm_size: Standard_D2plds_v5
                          image_publisher: canonical
                          image_offer: 0001-com-ubuntu-server-focal
                          image_sku: 20_04-lts-arm64
                          image_version: latest
                          packagePattern: "*ubuntu2004-arm64*/*.deb"
                          package_pipeline: "Azure.adu-private-preview.e2e-test"
                          du_tarball_script: >-
                              tar -xf /tmp/testsetup.tar.gz -C ./ &&
                              chmod u=rwx,g=rwx,o=rx ./testsetup/sas_vm_setup.sh &&
                              ./testsetup/sas_vm_setup.sh --distro ubuntu-20.04 --architecture arm64
                          image_working_directory: $(E2E_WORKING_DIR)
                          device_id_under_test: "ubuntu-20.04-arm64-sas"
              - job: SetupUbuntu2204_AMD64_VM
                displayName: "Setting up VM for Ubuntu 22.04 AMD64 Test VM"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_vm_setup.yaml@self
                      parameters:
                          distroName: ubuntu-22.04-amd64
                          vm_size: Standard_DS1_v2
                          image_publisher: canonical
                          image_offer: 0001-com-ubuntu-server-jammy
                          image_sku: 22_04-lts-gen2
                          image_version: latest
                          packagePattern: "*ubuntu2204-amd64*/*.deb"
                          package_pipeline: "Azure.adu-private-preview.e2e-test"
                          du_tarball_script: >-
                              tar -xf /tmp/testsetup.tar.gz -C ./ &&
                              chmod u=rwx,g=rwx,o=rx ./testsetup/sas_vm_setup.sh &&
                              ./testsetup/sas_vm_setup.sh --distro ubuntu-22.04 --architecture amd64
                          image_working_directory: $(E2E_WORKING_DIR)
                          device_id_under_test: "ubuntu-22.04-amd64-sas"
                          provisioning_type: "sas"
              - job: SetupUbuntu2204_ARM64_VM
                displayName: "Setting up VM for Ubuntu 22.04 ARM64 Test VM"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_vm_setup.yaml@self
                      parameters:
                          distroName: ubuntu-22.04-arm64
                          vm_size: Standard_D2plds_v5
                          image_publisher: canonical
                          image_offer: 0001-com-ubuntu-server-jammy
                          image_sku: 22_04-lts-arm64
                          image_version: latest
                          packagePattern: "*ubuntu2204-arm64*/*.deb"
                          package_pipeline: "Azure.adu-private-preview.e2e-test"
                          du_tarball_script: >-
                              tar -xf /tmp/testsetup.tar.gz -C ./ &&
                              chmod u=rwx,g=rwx,o=rx ./testsetup/sas_vm_setup.sh &&
                              ./testsetup/sas_vm_setup.sh --distro ubuntu-22.04 --architecture arm64
                          image_working_directory: $(E2E_WORKING_DIR)
                          device_id_under_test: "ubuntu-22.04-arm64-sas"
                          provisioning_type: "sas"
              - job: SetupDebian10_AMD64_VM
                displayName: "Setting up VM for Debain 10 AMD64 Test VM"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_vm_setup.yaml@self
                      parameters:
                          distroName: debian-10-amd64
                          provisioning_type: "sas"
                          vm_size: Standard_DS1_v2
                          image_publisher: debian
                          image_offer: debian-10
                          image_sku: 10
                          image_version: latest
                          packagePattern: "*debian10-amd64*/*.deb"
                          package_pipeline: "Azure.adu-private-preview.e2e-test"
                          du_tarball_script: >-
                              tar -xf /tmp/testsetup.tar.gz -C ./ &&
                              chmod u=rwx,g=rwx,o=rx ./testsetup/sas_vm_setup.sh &&
                              ./testsetup/sas_vm_setup.sh --distro debian-10 --architecture amd64
                          image_working_directory: $(E2E_WORKING_DIR)
                          device_id_under_test: "debian-10-amd64-sas"

        - stage: RunTestsAndPostResults
          displayName: Execute E2E Test
          dependsOn:
              - TerraformVMInitialization
          jobs:
              - job: RunUbuntu_2004_Amd64VmE2ETests
                displayName: "Running E2E Tests against Ubuntu 20.04 AMD64"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_test_run.yaml@self
                      parameters:
                          distroName: ubuntu-20.04-amd64
                          device_id_under_test: "ubuntu-20.04-amd64-sas"
              - job: RunUbuntu_2004_Arm64VmE2ETests
                displayName: "Running E2E Tests against Ubuntu 20.04 ARM64"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_test_run.yaml@self
                      parameters:
                          distroName: ubuntu-20.04-arm64
                          device_id_under_test: "ubuntu-20.04-arm64-sas"
              - job: RunUbuntu_2204_Amd64VmE2ETests
                displayName: "Running E2E Tests against Ubuntu 22.04 AMD64"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_test_run.yaml@self
                      parameters:
                          distroName: ubuntu-22.04-amd64
                          device_id_under_test: "ubuntu-22.04-amd64-sas"
              - job: RunUbuntu_2204_Arm64VmE2ETests
                displayName: "Running E2E Tests against Ubuntu 22.04 ARM64"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_test_run.yaml@self
                      parameters:
                          distroName: ubuntu-22.04-arm64
                          device_id_under_test: "ubuntu-22.04-arm64-sas"
              - job: RunDebian_10_Amd64VmE2ETests
                displayName: "Running E2E Tests against Debian 10 AMD64"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_test_run.yaml@self
                      parameters:
                          distroName: debian-10-amd64
                          device_id_under_test: "debian-10-amd64-sas"

        - stage: TerraformDestroyVm
          displayName: Tear down cloud resources (VMs) and destroy the resource group
          dependsOn:
              - TerraformSetup
              - TerraformVMInitialization
              - RunTestsAndPostResults
          pool: aduc_1es_client_pool
          variables:
              TERRAFORM_RESOURCE_GROUP_NAME: $[ stageDependencies.TerraformSetup.TerraformInstall.outputs['resource_group_name_step.TERRAFORM_RESOURCE_GROUP_NAME'] ]
          jobs:
              - job: DeleteUbuntu_2004_Amd64Vms
                displayName: "Deletes the VM for Ubuntu 20.04 AMD64"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_test_vm_cleanup.yaml@self
                      parameters:
                          device_id_under_test: ubuntu-20.04-amd64-sas
                          terraformResourceGroupName: $(TERRAFORM_RESOURCE_GROUP_NAME)
              - job: DeleteUbuntu_2004_Arm64Vms
                displayName: "Deletes the VM for Ubuntu 20.04 ARM64"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_test_vm_cleanup.yaml@self
                      parameters:
                          device_id_under_test: ubuntu-20.04-arm64-sas
                          terraformResourceGroupName: $(TERRAFORM_RESOURCE_GROUP_NAME)
              - job: DeleteUbuntu_2204_Amd64Vms
                displayName: "Deletes the VM for Ubuntu 22.04 AMD64"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_test_vm_cleanup.yaml@self
                      parameters:
                          device_id_under_test: ubuntu-22.04-amd64-sas
                          terraformResourceGroupName: $(TERRAFORM_RESOURCE_GROUP_NAME)
              - job: DeleteUbuntu_2204_Arm64Vms
                displayName: "Deletes the VM for Ubuntu 22.04 ARM64"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_test_vm_cleanup.yaml@self
                      parameters:
                          device_id_under_test: ubuntu-22.04-arm64-sas
                          terraformResourceGroupName: $(TERRAFORM_RESOURCE_GROUP_NAME)
              - job: DeleteDebian_10_Amd64Vms
                displayName: "Deletes the VM for Debian 10 AMD64"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:
                    - template: /azurepipelines/e2e_test/templates/e2e_test_vm_cleanup.yaml@self
                      parameters:
                          device_id_under_test: debian-10-amd64-sas
                          terraformResourceGroupName: $(TERRAFORM_RESOURCE_GROUP_NAME)
        - stage: RG_Destroy
          displayName: Destroys the Resource Group used for the End-To-End Test
          dependsOn:
              - TerraformSetup
              - TerraformVMInitialization
              - RunTestsAndPostResults
              - TerraformDestroyVm
          pool: aduc_1es_client_pool
          variables:
              TERRAFORM_RESOURCE_GROUP_NAME: $[ stageDependencies.TerraformSetup.TerraformInstall.outputs['resource_group_name_step.TERRAFORM_RESOURCE_GROUP_NAME'] ]
          jobs:
              - job: ResourceGroupDestroy
                steps:
                    - task: AzureCLI@2
                      displayName: Cleanup All Test Infrastructure
                      condition: eq(variables['SKIP_TEARDOWN'], 'false')
                      inputs:
                          azureSubscription: $(SERVICE_CONNECTION_NAME)
                          scriptType: bash
                          scriptLocation: inlineScript
                          inlineScript: |
                              echo "Starting to delete the resource group"
                              az group delete -n $(TERRAFORM_RESOURCE_GROUP_NAME) --yes --no-wait
