# E2E test pipeline - performs end-to-end tests on the following platforms
#  - Ubuntu 20.04

resources:
    containers:
        - container: ubuntu
          image: ubuntu:20.04
    repositories:
        - repository: 1ESPipelineTemplates
          type: git
          name: 1ESPipelineTemplates/1ESPipelineTemplates
          ref: refs/tags/release

parameters:
    - name: SKIP_TEARDOWN
      displayName: "Leave test infrastructure in-place"
      type: boolean
      default: false

variables:
    SKIP_TEARDOWN: ${{ parameters.SKIP_TEARDOWN }}
    E2E_WORKING_DIR: $(Build.SourcesDirectory)/azurepipelines/e2e_test

    Adu_Test_Msi: "adu-client-1es-msi"
    Adu_Arm_Service_Connection: "adu_subscr_servc_connection"
    Test_Vm_Ssh_PublicKey: ""
    Test_Vm_Ssh_PrivateKeyFile: "adu_e2e_test_ssh_key"
    Test_Vm_Ssh_PublicKeyFile: "adu_e2e_test_ssh_key.pub"
    Test_VmAdmin: "azureuser"
    Test_ResourceGroupname: "e2e-rg-$(Build.BuildId)" # Composed of e2e-rg-$(Build.BuildId)
    Test_VmName: "e2e-vm-$(Build.BuildId)"            # Composed of e2e-vm-$(Build.BuildId)
    Test_InfraDeploymentName: "e2e-deployment-$(Build.BuildId)" #Composed of e2e-deployment-$(Build.BuildId)
    Test_VmHostname: "" # Set after the VM is created
    Test_Location: "westus3"

name: "E2E Automated Test Run"
# environment: 'ADU E2E Test Env'
extends:
  template: v1/1ES.Unofficial.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: aduc_1es_client_pool
      os: linux

    sdl:
      sourceAnalysisPool:
        name: 1es_hosted_pool_windows
        os: windows
      suppression:
        suppressionFile: $(Build.SourcesDirectory)\guardian\SDL\.gdnsuppress
    customBuildTags:
    - ES365AIMigrationTooling

    stages:
        # - stage: PerformNativeBuilds
        #   displayName: Builds all the native architecture builds
        #   jobs:
        #       - job: BuildUbuntu_2004_AMD64
        #         displayName: Building the Device Update Package for Ubuntu 20.04 AMD64
        #         continueOnError: False
        #         pool: aduc_1es_client_pool
        #         steps:
        #             - template: /azurepipelines/build/templates/adu-docker-build-steps.yml@self
        #               parameters:
        #                   targetOs: ubuntu2004
        #                   targetArch: amd64

        - stage: InitializeTestInfra
          displayName: Initializes the Terraform VMs for the Automated Tests
          variables:
              TERRAFORM_RESOURCE_GROUP_NAME: $[ stageDependencies.TerraformSetup.TerraformInstall.outputs['resource_group_name_step.TERRAFORM_RESOURCE_GROUP_NAME'] ]
          pool: aduc_1es_client_pool
          jobs:

              - job: SetupUbuntu2004_AMD64_VM
                displayName: "Setting up VM for Ubuntu 20.04 AMD64 Test VM"
                timeoutInMinutes: 360
                cancelTimeoutInMinutes: 360
                pool: aduc_1es_client_pool
                steps:

                    - task: DownloadSecureFile@1
                      displayName: "Download the SSH Key for the VM"
                      name: public_vm_key
                      inputs:
                          secureFile: $(Test_Vm_Ssh_PublicKeyFile)
                          retryCount: 3
                          retryIntervalInSeconds: 5
                    - task: DownloadSecureFile@1
                      displayName: "Download the SSH Key for the VM"
                      name: private_vm_key
                      inputs:
                          secureFile: $(Test_Vm_Ssh_PrivateKeyFile)
                          retryCount: 3
                          retryIntervalInSeconds: 5
                    - bash: |
                         curl -s http://ipinfo.io/json | jq '.ip'
                      displayName: "Get the Public IP Address of the Agent"
                    - bash: |
                        key_contents=$(cat $(public_vm_key.secureFilePath))
                        echo "##vso[task.setvariable variable=Test_Vm_Ssh_PublicKey;isOutput=true;]$key_contents"
                      displayName: "Set the VM SSH Key variable for reading into the Azure VM Template"
                      name: set_ssh_key
                      workingDirectory: $(Agent.TempDirectory)

                    - bash: |
                        echo "The SSH Public Key is $(set_ssh_key.Test_Vm_Ssh_PublicKey)"
                      displayName: "Display the SSH Public Key"
                    - bash: |
                        echo "The Test_ResourceGroupname is $(Test_ResourceGroupname)"
                      displayName: "Display the SSH Public Key"
                    - bash: |
                        echo "The Test_VmName is $(Test_VmName)"
                      displayName: "Display the SSH Public Key"
                    - bash: |
                        echo "The Test_InfraDeploymentName is $(Test_InfraDeploymentName)"
                      displayName: "Display the SSH Public Key"

                    - task: AzureCLI@2
                      displayName: "Create the RG for the E2E Test Infrastructure"
                      inputs:
                          azureSubscription: $(Adu_Arm_Service_Connection)
                          scriptType: bash
                          scriptLocation: inlineScript
                          inlineScript: |
                              echo "Creating the RG for Test Infrastructure"
                              az group create --name $(Test_ResourceGroupname) --location $(Test_Location)
                          failOnStandardError: true

                    - task: AzureCLI@2
                      displayName: "Create the Ubuntu 20.04 VM for the E2E Test"
                      inputs:
                          azureSubscription: $(Adu_Arm_Service_Connection)
                          scriptType: bash
                          scriptLocation: inlineScript
                          inlineScript: |
                              echo "Creating the VM for Test"
                              az deployment group create --name $(Test_InfraDeploymentName) --resource-group "$(Test_ResourceGroupname)" --template-file ./azurepipelines/e2e_test/templates/az_vm.template.json --parameters adminUsername="$(Test_VmAdmin)" adminKey="$(set_ssh_key.Test_Vm_Ssh_PublicKey)" adminPassword="$(VM_ADMIN_PASS)" vmName="$(Test_VmName)" vmSize=Standard_DS1_v2 location=$(Test_Location) msi_resource_id=$(MSI_RESOURCE_ID)
                          failOnStandardError: true
                    - task: AzureCLI@2
                      displayName: "Get the Public Hostname of the VM"
                      inputs:
                        azureSubscription: $(Adu_Arm_Service_Connection)
                        scriptType: bash
                        scriptLocation: inlineScript
                        inlineScript: |
                            echo "Getting the Public IP Address of the VM"
                            hostname=$(az deployment group show -g $(Test_ResourceGroupname) -n $(Test_InfraDeploymentName) --query properties.outputs.hostname.value)
                            echo "##vso[task.setvariable variable=Test_VmHostname]$hostname"
                        failOnStandardError: true
                    - bash: |
                        echo "The VM Hostname is $(Test_VmHostname)"
                      displayName: "Display the VM Hostname"
                      workingDirectory: $(Agent.TempDirectory)
                    - bash: |
                        echo "foofoofoo" > ./testsetup.txt
                      displayName: "Test Content Generation"
                      workingDirectory: $(Agent.TempDirectory)
                    # Trying to copy some stuff over to the file
                    - task: AzureFileCopy@6
                      inputs:
                          SourcePath: $(Agent.TempDirectory)/testsetup.txt # string. Required. Source Path.
                          azureSubscription: $(Adu_Arm_Service_Connection) # string. Alias: ConnectedServiceNameARM. Required. Azure Subscription.
                          storage: $(AZURE_STORAGE_ENDPOINT) # string. Required. Azure Storage Account.
                          Destination: "AzureVMs" # 'AzureBlob' | 'AzureVMs'. Required. Destination Type.
                          resourceGroup: $(Test_ResourceGroupname)  # string. Alias: EnvironmentNameRM. Required when Destination = AzureVMs. Resource Group.
                          ResourceFilteringMethod: 'machineNames' # 'machineNames' | 'tags'. Optional. Use when Destination = AzureVMs. Select Machines By. Default: machineNames.
                          MachineNames: $(Test_VmName) # string. Optional. Use when Destination = AzureVMs. Filter Criteria.
                          vmsAdminUserName: $(Test_VmAdmin) # string. Required when Destination = AzureVMs. Admin Login.
                          vmsAdminPassword: $(VM_ADMIN_PASS) # string. Required when Destination = AzureVMs. Password.
                          TargetPath: "/home/$(Test_VmAdmin)/testsetup.tar" # string. Required when Destination = AzureVMs. Destination Folder.
                    - task: AzureCLI@2
                      displayName: "Attempt to remotely execute a script on the virtual machine"
                      inputs:
                        azureSubscription: $(Adu_Arm_Service_Connection)
                        scriptType: bash
                        scriptLocation: inlineScript
                        inlineScript: |
                            az vm run-command invoke -g $(Test_ResourceGroupname) -n $(Test_VmName) --command-id RunShellScript --scripts "ls /home/$(Test_VmAdmin)/"
                        failOnStandardError: true
                    # - template: /azurepipelines/e2e_test/templates/e2e_vm_setup.yaml@self
                    #   parameters:
                    #       image_working_directory: $(E2E_WORKING_DIR)
                    #       device_id_under_test: "ubuntu-20.04-amd64-x509"
                    #       package_pipeline: "Azure.adu-private-preview.e2e-test"
                    #       packagePattern: "*ubuntu2004-amd64*/*.deb"
                    #       distroName: ubuntu-20.04-amd64
                    # Now we have the option to upload to a blob storage container or we can try and  use scp
                    # to copy the files to the VM
                    # would prefer scp
                    # but depends.
                    # - template: /azurepipelines/e2e_test/templates/e2e_test_run.yaml@self
                    #   parameters:
                    #       distroName: ubuntu-20.04-amd64
                    #       device_id_under_test: "ubuntu-20.04-amd64-x509"


#   du_tarball_script: >-
#       tar -xf /tmp/testsetup.tar.gz -C ./ &&
#       chmod u=rwx,g=rwx,o=rx ./testsetup/sas_vm_setup.sh &&
#       ./testsetup/sas_vm_setup.sh --distro ubuntu-20.04 --architecture amd64
#   image_working_directory: $(E2E_WORKING_DIR)
#   device_id_under_test: "ubuntu-20.04-amd64-sas"
